{{define "function"}} {{$f := .}}

func {{.TestName}}(t *testing.T) {
	Convey("{{.TestName}}", t, func() {
		tests := []struct { {{if not $f.PrintInputs}}
			// Test description
			name string {{end}} {{with .Receiver}} {{if .IsStruct}} {{if .Fields}}
			// Receiver fields.{{end}} {{range .Fields}}
			{{Field .}} {{.Type}} {{end}} {{else}}
			// Receiver
			{{Receiver .}} {{.Type}} {{end}} {{end}} {{if .TestParameters}}
			// Parameters {{end}} {{range .TestParameters}}
			{{Param .}} {{.Type}} {{end}} {{if or .TestResults .ReturnsError}}
			// Expected results {{end}} {{range .TestResults}}
			{{Want .}} {{.Type}} {{end}} {{if .ReturnsError}}
			// Expected error -- either ShouldBeNil or ShouldNotBeNil
			wantErr func(interface{}, ...interface{}) string{{end}}
		}{
			// TODO: Add test cases.
		}
		for {{if not .IsNaked}} _, tt := {{end}} range tests {
			Convey(tt.name, func() { {{with .Receiver}}{{if .IsStruct}}
				{{Receiver .}} := {{if .Type.IsStar}}&{{end}}{{.Type.Value}}{ {{range .Fields}}
				{{.Name}}: tt.{{Field .}}, {{end}}
				} {{end}} {{end}} {{range .Parameters}}{{if .IsWriter}}
				{{Param .}} := &bytes.Buffer{} {{end}} {{end}} {{if and (not .OnlyReturnsError) (not .OnlyReturnsOneValue) }}
				{{template "results" $f}} {{template "call" $f}} {{end}} {{if .ReturnsError}}
				{{if .OnlyReturnsError}}err := {{template "call" $f}}{{end}}So(err, tt.wantErr){{end}}{{range .TestResults}} {{if .IsWriter}}
				{{Got .}} := {{Param .}}.String(); So({{Got .}}, ShouldEqual, tt.{{Want .}}) {{else if .IsBasicType}}
				{{if $f.OnlyReturnsOneValue}}{{Got .}} := {{template "inline" $f}}; {{end}} So({{Got .}}, ShouldEqual, tt.{{Want .}}) {{else}}
				{{if $f.OnlyReturnsOneValue}}{{Got .}} := {{template "inline" $f}}; {{end}} So({{Got .}}, ShouldResemble, tt.{{Want .}}) {{end}}{{end}}
			})
		}
	})
}

{{end}}
